/*
 * Note: this file originally auto-generated by mib2c using
 *        : mib2c.old-api.conf,v 1.4 2004/07/28 08:04:58 dts12 Exp $
 */
#ifndef EXPORTERMIB_H
#define EXPORTERMIB_H

#if defined(SNMP_SUPPORT)

#ifdef __cplusplus
extern "C" {
#endif

#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

#include <pthread.h>

#include <IPDR/Defs.h>
#include <IPDR/IPDR.h>

#define SNMP_COPY_STRING(d,s) if(s){ strncpy(d,s,ASN_VAR_STR_SIZE); d[ASN_VAR_STR_SIZE-1] = '\0'; }else{ d[0] = '\0'; }

/*
 * column number definitions for table sessionsTable 
 */
#define COLUMN_SESSIONID		1
#define COLUMN_SESSIONNAME		2
#define COLUMN_SESSIONDESCRIPTION		3
#define COLUMN_SESSIONTRANSMITTEDRECORDS		4
#define COLUMN_SESSIONACKNOWLEDGEDRECORDS		5
#define COLUMN_SESSIONENQUEUEDRECORDS		6
#define COLUMN_SESSIONLOSTRECORDS		7
#define COLUMN_SESSIONOUTSTANDINGRECORDS		8
#define COLUMN_SESSIONUNACKNOWLEDGEDRECORDS		9
#define sessionsTable_COL_MIN 1
#define sessionsTable_COL_MAX 9

/*
 * column number definitions for table collectorsTable 
 */
#define COLUMN_COLLECTORADDRESS		1
#define COLUMN_COLLECTORPORT		2
#define COLUMN_COLLECTORCONNECTIONS		3
#define COLUMN_COLLECTORNAME		4
#define collectorsTable_COL_MIN 1
#define collectorsTable_COL_MAX 4

/*
 * column number definitions for table templatesTable 
 */
#define COLUMN_TEMPLATESESSIONID		1
#define COLUMN_TEMPLATEID		2
#define COLUMN_TEMPLATESCHEMANAME		3
#define COLUMN_TEMPLATETYPENAME		4
#define COLUMN_TEMPLATEDESCRIPTION		5
#define COLUMN_TEMPLATENUMKEYS		6
#define templatesTable_COL_MIN 1
#define templatesTable_COL_MAX 6

/*
 * column number definitions for table keysTable 
 */
#define COLUMN_KEYSESSIONID		1
#define COLUMN_KEYTEMPLATEID		2
#define COLUMN_KEYID		3
#define COLUMN_KEYTYPEID		4
#define COLUMN_KEYNAME		5
#define COLUMN_KEYLABEL		6
#define COLUMN_KEYHELP		7
#define COLUMN_KEYENABLED		8
#define keysTable_COL_MIN 1
#define keysTable_COL_MAX 8

/*
 * column number definitions for table keysAttributesTable 
 */
#define COLUMN_KEYATTRIBUTESSESSIONID		1
#define COLUMN_KEYATTRIBUTESTEMPLATEID		2
#define COLUMN_KEYATTRIBUTESID		3
#define COLUMN_KEYATTRIBUTESTYPEID		4
#define COLUMN_KEYATTRIBUTESNAME		5
#define COLUMN_KEYATTRIBUTESLABEL		6
#define COLUMN_KEYATTRIBUTESHELP		7
#define COLUMN_KEYATTRIBUTESENABLED		8
#define keysAttributesTable_COL_MIN 1
#define keysAttributesTable_COL_MAX 8

/*
 * column number definitions for table collectorsSessionsTable 
 */
#define COLUMN_COLLECTORSSSIONID		1
#define COLUMN_COLLECTORSSSIONNAME		2
#define COLUMN_COLLECTORSSSIONPRIORITY	3
#define collectorsSessionsTable_COL_MIN 1
#define collectorsSessionsTable_COL_MAX 3



#define ASN_SMALTYPE_STR_SIZE		10
#define ASN_BIGTYPE_STR_SIZE		20
#define ASN_VAR_STR_SIZE			256
#define ASN_COMAND_STR_SIZE			2048

#define ASN_SMALTYPE_SIZE			4
#define ASN_BIGTYPE_SIZE			8
#define ASN_VAR_SIZE				0xFFFFFFFF
#define ASN_NULL_SEZE				0

#define ASN_INTEGER_SIZE			ASN_SMALTYPE_SIZE
#define ASN_COUNTER_SIZE			ASN_SMALTYPE_SIZE
#define ASN_GAUGE_SIZE				ASN_SMALTYPE_SIZE
#define ASN_TIMETICKS_SIZE			ASN_SMALTYPE_SIZE
#define ASN_OPAQUE_FLOAT_SIZE		ASN_SMALTYPE_SIZE
#define ASN_IPADDRESS_SIZE			ASN_SMALTYPE_SIZE
#define ASN_UNSIGNED_SIZE			ASN_SMALTYPE_SIZE
#define ASN_UINTEGER_SIZE			ASN_SMALTYPE_SIZE
#define ASN_FLOAT_SIZE				ASN_SMALTYPE_SIZE

#define ASN_OPAQUE_DOUBLE_SIZE		ASN_BIGTYPE_SIZE
#define ASN_OPAQUE_I64_SIZE			ASN_BIGTYPE_SIZE
#define ASN_OPAQUE_U64_SIZE			ASN_BIGTYPE_SIZE
#define ASN_OPAQUE_COUNTER64_SIZE	ASN_BIGTYPE_SIZE
#define ASN_COUNTER64_SIZE			ASN_BIGTYPE_SIZE
#define ASN_DOUBLE_SIZE				ASN_BIGTYPE_SIZE
#define ASN_INTEGER64_SIZE			ASN_BIGTYPE_SIZE
#define ASN_UNSIGNED64_SIZE			ASN_BIGTYPE_SIZE

#define ASN_OPAQUE_SIZE				ASN_VAR_SIZE
#define ASN_OBJECT_ID_SIZE			ASN_VAR_SIZE
#define ASN_PRIV_EXCL_RANGE_SIZE	ASN_VAR_SIZE
#define ASN_PRIV_INCL_RANGE_SIZE	ASN_VAR_SIZE
#define ASN_OCTET_STR_SIZE			ASN_VAR_SIZE

#define SNMP_NOSUCHOBJECT_SIZE		ASN_NULL_SIZE
#define SNMP_NOSUCHINSTANCE_SIZE	ASN_NULL_SIZE
#define SNMP_ENDOFMIBVIEW_SIZE		ASN_NULL_SIZE

typedef struct IPDR_tag_ExporterMib{
	pthread_t				MainFuncThread;
	
	volatile	IPDR_BOOL	Running; /**< true while the MainFunc is running */
	
	IPDR_ExporterHandle		ExporterHandle;
}IPDR_ExporterMIB;

typedef struct SNMP_tag_addCollector
{
	char addCollectorName[ASN_VAR_STR_SIZE];
	IPDR_IPAddress addCollectorAddress;
	int addCollectorPort;
	int addCollectorConnections;
}SNMP_addCollector;

typedef struct SNMP_tag_removeCollector
{
	char removeCollectorName[ASN_VAR_STR_SIZE];
}SNMP_removeCollector;

typedef struct SNMP_tag_addSession
{
	int addSessionID;
	char addSessionName[ASN_VAR_STR_SIZE];
	char addSessionDescription[ASN_VAR_STR_SIZE];
}SNMP_addSession;

typedef struct SNMP_tag_removeSession
{
	int removeSessionID;
}SNMP_removeSession;

typedef struct SNMP_tag_startSession
{
	int startSessionID;
	int startSessionNegotiate;
}SNMP_startSession;

typedef struct SNMP_tag_stopSession
{
	int stopSessionID;
	int stopSessionReason;
	int stopSessionTimeout;
}SNMP_stopSession;

typedef struct SNMP_tag_reconfigureExporter
{
	int reconfigureExporter;
}SNMP_reconfigureExporter;

typedef struct SNMP_tag_commandString
{
	char string[ASN_COMAND_STR_SIZE];
}SNMP_commandString;

typedef struct SNMP_tag_assignCollectorToSession
{
	int assignCollectorSessionID;
	char assignCollectorName[ASN_VAR_STR_SIZE];
	int assignCollectorPrioriry;
}SNMP_assignCollectorToSession;

typedef struct SNMP_tag_removeCollectorFromSession
{
	int removeCollectorSessionID;
	char removeCollectorSessionName[ASN_VAR_STR_SIZE];
}SNMP_removeCollectorFromSession;

void init_exporterScalar(void);
Netsnmp_Node_Handler handle_exporterAddress;
Netsnmp_Node_Handler handle_exporterPort;
Netsnmp_Node_Handler handle_vendorString;
Netsnmp_Node_Handler handle_consolePort;
Netsnmp_Node_Handler handle_consolePassword;
Netsnmp_Node_Handler handle_loggerAddress;
Netsnmp_Node_Handler handle_loggerPort;
Netsnmp_Node_Handler handle_moduleExporter;
Netsnmp_Node_Handler handle_moduleQueue;
Netsnmp_Node_Handler handle_moduleTCP;
Netsnmp_Node_Handler handle_moduleMemory;
Netsnmp_Node_Handler handle_moduleProtocol;
Netsnmp_Node_Handler handle_modulePlatform;
Netsnmp_Node_Handler handle_moduleHost;
Netsnmp_Node_Handler handle_windowSize;
Netsnmp_Node_Handler handle_windowTimeout;
Netsnmp_Node_Handler handle_templateAckTimeout;
Netsnmp_Node_Handler handle_statisticsInterval;
Netsnmp_Node_Handler handle_dataRcvChunkSize;
Netsnmp_Node_Handler handle_dataRcvMaxMemory;
Netsnmp_Node_Handler handle_dataRcvInitialNumChunks;
Netsnmp_Node_Handler handle_dataSndChunkSize;
Netsnmp_Node_Handler handle_dataSndMaxMemory;
Netsnmp_Node_Handler handle_dataSndInitialNumChunks;
Netsnmp_Node_Handler handle_sendBuffersChunkSize;
Netsnmp_Node_Handler handle_sendBuffersMaxMemory;
Netsnmp_Node_Handler handle_sendBuffersInitialNumChunks;
Netsnmp_Node_Handler handle_flushInterval;
Netsnmp_Node_Handler handle_queueChunkSize;
Netsnmp_Node_Handler handle_queueMaxMemory;
Netsnmp_Node_Handler handle_queueInitialNumChunks;
Netsnmp_Node_Handler handle_protocolInfoAddr;
Netsnmp_Node_Handler handle_protocolInfoPort;
Netsnmp_Node_Handler handle_keepAliveInterval;
Netsnmp_Node_Handler handle_autoconnectInterval;
Netsnmp_Node_Handler handle_connectResponseTimeout;
Netsnmp_Node_Handler handle_waitBestCollectorTimeout;
Netsnmp_Node_Handler handle_dataAckTimeInterval;
Netsnmp_Node_Handler handle_dataAckSequenceInterval;
Netsnmp_Node_Handler handle_multiSession;
Netsnmp_Node_Handler handle_templateNegotiation;
Netsnmp_Node_Handler handle_structureSupport;
Netsnmp_Node_Handler handle_addCollectorName;
Netsnmp_Node_Handler handle_addCollectorAddress;
Netsnmp_Node_Handler handle_addCollectorPort;
Netsnmp_Node_Handler handle_addCollectorConnections;
Netsnmp_Node_Handler handle_removeCollectorName;
Netsnmp_Node_Handler handle_addSessionID;
Netsnmp_Node_Handler handle_addSessionName;
Netsnmp_Node_Handler handle_addSessionDescription;
Netsnmp_Node_Handler handle_removeSessionID;
Netsnmp_Node_Handler handle_startSessionID;
Netsnmp_Node_Handler handle_startSessionNegotiate;
Netsnmp_Node_Handler handle_stopSessionID;
Netsnmp_Node_Handler handle_stopSessionReason;
Netsnmp_Node_Handler handle_stopSessionTimeout;
Netsnmp_Node_Handler handle_configurationCommandString;
Netsnmp_Node_Handler handle_configurationCommandResult;
Netsnmp_Node_Handler handle_assignCollectorSessionID;
Netsnmp_Node_Handler handle_assignCollectorName;
Netsnmp_Node_Handler handle_assignCollectorPrioriry;
Netsnmp_Node_Handler handle_removeCollectorSessionID;
Netsnmp_Node_Handler handle_removeCollectorSessionName;
Netsnmp_Node_Handler handle_reconfigureExporter;
Netsnmp_Node_Handler handle_commandString;
Netsnmp_Node_Handler handle_commandResultString;

void            initialize_table_sessionsTable(void);
Netsnmp_Node_Handler sessionsTable_handler;
Netsnmp_First_Data_Point sessionsTable_get_first_data_point;
Netsnmp_Next_Data_Point sessionsTable_get_next_data_point;
void            initialize_table_collectorsTable(void);
Netsnmp_Node_Handler collectorsTable_handler;
Netsnmp_First_Data_Point collectorsTable_get_first_data_point;
Netsnmp_Next_Data_Point collectorsTable_get_next_data_point;
void            initialize_table_templatesTable(void);
Netsnmp_Node_Handler templatesTable_handler;
Netsnmp_First_Data_Point templatesTable_get_first_data_point;
Netsnmp_Next_Data_Point templatesTable_get_next_data_point;
void            initialize_table_keysTable(void);
Netsnmp_Node_Handler keysTable_handler;
Netsnmp_First_Data_Point keysTable_get_first_data_point;
Netsnmp_Next_Data_Point keysTable_get_next_data_point;
void            initialize_table_keysAttributesTable(void);
Netsnmp_Node_Handler keysAttributesTable_handler;
Netsnmp_First_Data_Point keysAttributesTable_get_first_data_point;
Netsnmp_Next_Data_Point keysAttributesTable_get_next_data_point;
void            initialize_table_collectorsSessionsTable(void);
Netsnmp_Node_Handler collectorsSessionsTable_handler;
Netsnmp_First_Data_Point collectorsSessionsTable_get_first_data_point;
Netsnmp_Next_Data_Point collectorsSessionsTable_get_next_data_point;

#ifdef __cplusplus
}
#endif

#endif							/* SNMP_SUPPORT */

#endif                          /* EXPORTERMIB_H */
